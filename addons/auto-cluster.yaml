type: update
jpsVersion: 1.8.1
name: Redis multi region cluster logic
decription: Redis multi region cluster autoscaling logic
baseUrl: https://raw.githubusercontent.com/jelastic-jps/redis-multiregion/master

onInstall:
  - getRedisConfigPath
  - clusterInit
  
onBeforeScaleIn[nosqldb]:
  - if ('${settings.topology}' == 'maxrealia'):
      stopEvent:
        type: warning
        message: Scaling is not supported for such type of topology.
  - else:
    - if (nodes.nosqldb.length == 3):
        stopEvent:
          type: warning
          message: At least 3 master nodes must be present in cluster.
    - else:
      - forceTakeover
      - forEach(event.response.nodes):
        - cmd[${@i.id}]: |-
            export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep ^masterauth|awk '{print $2}'|tail -n 1);
            MASTER_ID=$(redis-cli cluster nodes|grep myself|awk '{print $1}')
            SLAVE_IDS=$(redis-cli cluster nodes|grep "${MASTER_ID}"|awk '{print $1}'|grep -v "${MASTER_ID}")
            for CURRENT_SLAVE in ${SLAVE_IDS}
            do
                redis-cli --cluster del-node localhost:6379 ${CURRENT_SLAVE} --cluster-yes; 
            done
          user: root
        - cmd[${@i.id}]: |-
            ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1;
          user: root
        - reshardAndRemoveBeforeScaleIn:
            address: ${response.out}
      - rebalanceCluster
    
onAfterScaleIn[nosqldb]:
  - script: ${baseUrl}/scripts/scaleEnvs.js

onAfterRedeployContainer[nosqldb]:
  - getRedisConfigPath

onBeforeAddNode[nosqldb]:
  - if ('${settings.topology}' == 'maxrealia'):
      stopEvent:
        type: warning
        message: Scaling is not supported for such type of topology.
        
onAfterScaleOut[nosqldb]:
  - getRedisPasswd
  - addNewNodeToCluster
  - forceTakeover
  - setClusterAnnounceIp: ${event.response.nodes.join(id,)}
  - script: ${baseUrl}/scripts/scaleEnvs.js
  - script: ${baseUrl}/scripts/addReplicas.js

actions:
  clusterInit:
    - if ('${settings.topology}' == 'maxrealia'):
      - script: ${baseUrl}/scripts/createCluster.js
    - else:
      - cmd[${nodes.nosqldb.master.id}]: |-
          export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
          yes yes| redis-cli --cluster create $(echo ${nodes.nosqldb.join(address,)} | sed 's/,/:6379 /g'):6379 --cluster-replicas 0
        user: root
        sayYes: no
      - forEach(nodes.nosqldb):
        - cmd[${@i.id}]:
            sed -i '/^cluster-announce-ip/d' ${globals.redisConfigPath};
            echo "cluster-announce-ip $(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1)" >> ${globals.redisConfigPath};
          user: root
          sayYes: no
        - cmd[${@i.id}]: ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1;
          user: root
        - cmd[nosqldb]: sed -i 's/${@i.address}/${response.out}/'  /var/lib/redis/nodes.conf 
          user: root
      - cmd[nosqldb]: jem service restart
      - script: ${baseUrl}/scripts/addReplicas.js

  reshardAfterScaleOut:
    - cmd[${this.id}]:
        export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
        export ANNOUNCE_ADDRESS=$(cat ${globals.redisConfigPath}|grep ^cluster-announce-ip|tail -n 1|awk '{print $2}');
        export NEW_NODE_ID=$(redis-cli cluster nodes|grep ${ANNOUNCE_ADDRESS}|grep master|awk '{print $1}');
        export n=$(redis-cli cluster nodes|grep master|wc -l);
        export SHARDS_NUM=$(( 16384 / ${n} ));
        if [ ! -z "${NEW_NODE_ID}" ]; then redis-cli --cluster reshard ${ANNOUNCE_ADDRESS}:6379 --cluster-from all --cluster-to ${NEW_NODE_ID} --cluster-slots ${SHARDS_NUM} --cluster-yes; else true; fi;
      user: root
      sayYes: no
      
  reshardAndRemoveBeforeScaleIn:
    - cmd[${nodes.nosqldb.master.id}]: |-
        export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
        export MASTER_NODE_ADDR=$(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1);
        redis-cli --cluster check ${MASTER_NODE_ADDR}:6379 || redis-cli --cluster fix ${MASTER_NODE_ADDR}:6379;
        export SHARDS_NUM=$(redis-cli --cluster check ${this.address}:6379|grep '^${this.address}:6379'|awk '{print $7}');
        export OLD_NODE_ID=$(redis-cli cluster nodes|grep ${this.address}:6379|awk '{print $1}');
        export MASTER_NODE_ID=$(redis-cli cluster nodes|grep master|awk '{print $1}'|grep -v $OLD_NODE_ID|head -n 1);
        if [ ! -z "${SHARDS_NUM}" ]; then 
            redis-cli --cluster reshard ${MASTER_NODE_ADDR}:6379 --cluster-from ${OLD_NODE_ID} --cluster-to ${MASTER_NODE_ID} --cluster-slots ${SHARDS_NUM} --cluster-yes 1>/dev/null; 
            export HOST_LIST_AFTER_REMOVE=$(redis-cli cluster nodes|grep -v ${this.address}|awk '{print $2}'|awk -F ':' '{print $1}'|tr '\n' ' ');
            for i in ${HOST_LIST_AFTER_REMOVE}; do redis-cli -h ${i} cluster forget ${OLD_NODE_ID}; done; 
        else 
            redis-cli --cluster del-node ${MASTER_NODE_ADDR}:6379 ${OLD_NODE_ID} --cluster-yes; 
        fi;
      user: root
      sayYes: no
      
  rebalanceCluster:
    - cmd[${nodes.nosqldb.master.id}]:
        export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
        redis-cli --cluster check ${nodes.nosqldb.master.address}:6379 || redis-cli --cluster fix ${nodes.nosqldb.master.address}:6379;
        redis-cli --cluster rebalance ${nodes.nosqldb.master.address}:6379;
      user: root
      
  setClusterAnnounceIp:
    - cmd[${this}]:
        jem service stop;
        sed -i '/^cluster-announce-ip/d' ${globals.redisConfigPath};
        echo "cluster-announce-ip $(ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's/\/[0-9]*//g' | head -n 2|tail -n 1)" >> ${globals.redisConfigPath};
        jem service start;
      user: root
      sayYes: no
      
  addNewNodeToCluster:
    - prepareClusterNode: ${event.response.nodes.join(id,)}
    - forEach(event.response.nodes):
        - cmd[${nodes.nosqldb.master.id}]: |-
            export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep '^requirepass'|awk '{print $2}');
            export n=$(redis-cli cluster nodes|wc -l);
            redis-cli -h ${nodes.nosqldb.master.address} cluster meet ${@i.address} 6379; sleep 5;
          user: root
    - forEach(event.response.nodes):
        - reshardAfterScaleOut: 
            id: ${@i.id}
            address: ${@i.address}
    - rebalanceCluster
      
  getRedisPasswd:
    - cmd[${nodes.nosqldb.master.id}]: cat ${globals.redisConfigPath} |grep ^requirepass|awk '{print $2}'
    
  prepareClusterNode:
    - getRedisPasswd
    - cmd[${this}]:
        sed -i 's/^loglevel notice/loglevel warning/' ${globals.redisConfigPath};
        jem passwd set -p ${response.out};
        echo -e "cluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes\nmasterauth ${response.out}" >> ${globals.redisConfigPath};
        jem service restart;
      user: root
      
  forceTakeover:
    - forEach(nodes.nosqldb):
      - cmd[${@i.id}]:
          export REDISCLI_AUTH=$(cat ${globals.redisConfigPath} |grep ^masterauth|awk '{print $2}'|tail -n 1); redis-cli -h 127.0.0.1 -p 6379 cluster failover takeover;
        user: root

  getRedisConfigPath:
    - cmd[${nodes.nosqldb.master.id}]: realpath /etc/redis.conf
    - setGlobals:
        redisConfigPath: ${response.out}
