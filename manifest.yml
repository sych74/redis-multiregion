type: install
jpsVersion: '1.8.1'
name: Multi-Region Redis Cluster
id: redis-cluster-multiregions
categories:
  - apps/clusters
  - apps/databases
logo: /images/redis-multiregion-logo.png
description: 
  text: Highly-available and reliable Redis cluster setup with automatic multi-region distribution
  short: Enterprise-grade Redis Cluster with automatic distribution across several regions
baseUrl: https://raw.githubusercontent.com/jelastic-jps/redis-multiregion/master

onBeforeInit: scripts/onBeforeInit.js

globals:
  multiregional_utils: https://github.com/jelastic-jps/common/blob/main/multiregional-cluster-utils
  cluster_app: redis
  password: ${fn.password(10)}

settings:
  main:
    fields:
      - caption: Version
        name: nodeType
        type: list    
        values: 
          - value: redis7
            caption: Redis 7
          - value: redis6
            caption: Redis 6
        default: redis7
      - caption: Environment
        type: envname
        name: envName
        dependsOn: region
        tooltip: Maximum length of environment name should be not bigger than 16 symbols
        randomName: true
        showFullDomain: false
        required: true
      - type: checkbox
        caption: "Create separate environment group"
        name: envGroupEnabled
        value: true
      - name: externalIpAddresses
        type: checkbox
        caption: Enable External IP Addresses for cluster nodes
      - type: radiolist
        caption: Topology
        name: topology
        tooltip: 
          text:  <p style="font-size:18px">Redis cluster topologies for multi-region distribution</p><br>
                   <table  style="width:100%"><td></td><th style="text-align:center">Maximum Performance</th><th></th><th style="text-align:center">Maximum Reliability</th></table>
                   <img width='760' height='380' src='https://raw.githubusercontent.com/jelastic-jps/redis-multiregion/master/images/high-performance-HA-topology-black-bg4.svg?sanitize=true'>  
          tipParams: 
          maxWidth: 785
          minWidth: 400
          dismissDelay: 600000
          hideOnOver: false
        values:
          maxperf: Maximum Performance
          maxrealia: Maximum Reliability
        default: maxrealia
      - caption: Regions
        type: regionlist
        name: regions
        disableInactive: true
        selectFirstAvailable: false
        multiSelect: true
        min: 3
        max: 5
        filter:
          isActive: true
        tooltip: The order of selected regions matters for <b>Maximum Performance</b> topology only. First selected region will host the primary node of cluster, so this region should have the highest performance. Other regions will host the secondary nodes. 3 nodes will be created for each environment.

mixins:
  - https://github.com/jelastic-jps/common/blob/main/multiregional-cluster-utils/multiregion-globals-common.yml
  - https://github.com/jelastic-jps/common/blob/main/multiregional-cluster-utils/multiregion-db-common.yml

actions:
  createEnvGroups:
    - script: |
        import com.hivext.api.Response;
        let resp = jelastic.env.group.CreateGroup({
            session  : session,
            envGroup: "Database cluster ${settings.envName}"
          });
        if (resp.result != 0 && resp.result != Response.ENVIRONMENT_GROUP_ALREADY_EXISTS) return resp;
        return { result: 0 };

onInstall:
  - initGlobals
  - setGlobals:
      domain: ${settings.envName}-1.${globals.domain-1}
  - if ('${settings.envGroupEnabled}' == 'true'):
    - createEnvGroups
    - setGlobals:
        envGroups: "Database cluster ${settings.envName}"
  - createEnvs
  - if ('${settings.topology}' == 'maxperf'):
    - setGlobals:
        topologyDescription: "maximum performance"
  - if ('${settings.topology}' == 'maxrealia'):
    - setGlobals:
        topologyDescription: "maximum reliability"
  - script: ${globals.multiregional_utils}/get-cluster-envs.js
    envName: ${settings.envName}-1
  - setGlobals:
      DBEnvs: ${response.items.join(,)}
  - script: |
      let resp = jelastic.env.control.GetEnvInfo('${settings.envName}-1', session)
      if (resp.result != 0) return resp
      let node = resp.nodes.find(node => node.nodeGroup == 'nosqldb' && node.ismaster)
      return { result: 0, node: node }
  - setGlobals:
      master_id_nosqldb-1: ${response.node.id}
      master_address_nosqldb-1: ${response.node.address}
  - installClusterLogic

startPage: http://node${globals.master_id_nosqldb-1}-${globals.domain}/
success:
  email: /text/success.md?_r=${fn.random}
  text: /text/success.md?_r=${fn.random}
